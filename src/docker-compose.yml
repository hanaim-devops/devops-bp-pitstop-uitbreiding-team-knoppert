services:

  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - monitoring  

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - "./DIYManagementAPI/prometheus.yml:/etc/prometheus/prometheus.yml"
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --storage.tsdb.min-block-duration=1m
      - --storage.tsdb.max-block-duration=1m
      - --storage.tsdb.retention.time=5m
    ports:
      - "9090:9090"
    networks:
      - monitoring
    depends_on:
      - diymanagementapi

  thanos-sidecar:
    image: quay.io/thanos/thanos:v0.32.2
    container_name: thanos-sidecar
    user: "0"  # Run as root user to avoid permission issues
    command:
      - sidecar
      - --prometheus.url=http://prometheus:9090
      - --grpc-address=0.0.0.0:10901
      - --http-address=0.0.0.0:10902
      - --tsdb.path=/prometheus
      - --objstore.config-file=/etc/thanos/objstore.yml
    volumes:
      - prometheus-data:/prometheus
      - ./thanos/objstore.yml:/etc/thanos/objstore.yml
    networks:
      - monitoring
    depends_on:
      - prometheus
      - minio

  thanos-store:
    image: quay.io/thanos/thanos:v0.32.2
    container_name: thanos-store
    user: "0"
    command:
      - store
      - --grpc-address=0.0.0.0:10901
      - --http-address=0.0.0.0:10902
      - --data-dir=/data
      - --objstore.config-file=/etc/thanos/objstore.yml
    volumes:
      - thanos-data:/data
      - ./thanos/objstore.yml:/etc/thanos/objstore.yml
    networks:
      - monitoring
    depends_on:
      - minio

  thanos-query:
    image: quay.io/thanos/thanos:v0.32.2
    container_name: thanos-query
    command:
      - query
      - --http-address=0.0.0.0:9090
      - --store=thanos-sidecar:10901
      - --store=thanos-store:10901
    ports:
      - "19090:9090"
    networks:
      - monitoring
    depends_on:
      - thanos-sidecar
      - thanos-store

  node-exporter:
    image: prom/node-exporter
    networks:
      - monitoring
    ports:
      - "9100:9100"

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
      - "./rabbitmq:/etc/pitstop/"
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - backend
    environment:
      - RABBITMQ_CONFIG_FILE=/etc/pitstop/rabbitmq.conf

  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge
    container_name: sqlserver
    volumes:
      - sqlserverdata:/var/opt/mssql
    ports:
      - "1434:1433"
    networks:
      - backend
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_PID=Developer
      - SA_PASSWORD=8jkGh47hnDw89Haq8LN2

  mailserver:
    image: maildev/maildev:1.1.0
    container_name: mailserver
    ports:
      - "25:25"
      - "4000:80"
    networks:
      - backend

  logserver:
    image: datalust/seq:latest
    container_name: logserver
    ports:
      - "5341:80"
    networks:
      - backend
    environment:
      - ACCEPT_EULA=Y

  vehiclemanagementapi:
    image: pitstop/vehiclemanagementapi:1.0
    build: VehicleManagementAPI
    depends_on:
      - rabbitmq
      - sqlserver
    networks:
      - backend
    ports:
      - "5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  customermanagementapi:
    image: pitstop/customermanagementapi:1.0
    build: CustomerManagementAPI
    depends_on:
      - rabbitmq
      - sqlserver
    networks:
      - backend
    ports:
      - "5100"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  workshopmanagementapi:
    image: pitstop/workshopmanagementapi:1.0
    build: WorkshopManagementAPI
    depends_on:
      - rabbitmq
      - sqlserver
    networks:
      - backend
    ports:
      - "5200"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  auditlogservice:
    image: pitstop/auditlogservice:1.0
    build: AuditlogService
    container_name: auditlogservice
    depends_on:
      - rabbitmq
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=Production

  invoiceservice:
    image: pitstop/invoiceservice:1.0
    build: InvoiceService
    container_name: invoiceservice
    depends_on:
      - rabbitmq
      - sqlserver
      - mailserver
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=Production

  notificationservice:
    image: pitstop/notificationservice:1.0
    build: NotificationService
    container_name: notificationservice
    depends_on:
      - rabbitmq
      - sqlserver
      - mailserver
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=Production

  timeservice:
    image: pitstop/timeservice:1.0
    build: TimeService
    container_name: timeservice
    depends_on:
      - rabbitmq
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=Production

  workshopmanagementeventhandler:
    image: pitstop/workshopmanagementeventhandler:1.0
    build: WorkshopManagementEventHandler
    container_name: workshopmanagementeventhandler
    depends_on:
      - rabbitmq
      - sqlserver
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=Production

  webapp:
    image: pitstop/webapp:1.0
    build: WebApp
    container_name: webapp
    depends_on:
      - customermanagementapi
      - vehiclemanagementapi
      - workshopmanagementapi
    networks:
      - backend
      - frontend
    ports:
      - "7005:7005"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  diymanagementapi:
    image: pitstop/diymanagementapi:1.0
    build: DIYManagementAPI
    depends_on:
      - rabbitmq
      - sqlserver
    networks:
      - backend
      - monitoring
    ports:
      - "5300:5300"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  prometheus:
    image: prom/prometheus
    volumes:
      - "./DIYManagementAPI/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090

  node-exporter:
    image: prom/node-exporter
    ports:
      - 9100:9100

volumes:
  sqlserverdata:
    external: true
  prometheus-data:
    driver: local
  thanos-data:
    driver: local
  rabbitmqdata:
    external: true
  minio-data:
    driver: local

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
  monitoring:
    driver: bridge